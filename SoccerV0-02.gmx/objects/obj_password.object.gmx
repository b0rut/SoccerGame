<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_username</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>click=0
backtime=0
global.lchar = 0;
global.lpress = 0;
global.password = 0;
global.LOGIN = 0;
alarm[0]=30
selected = false;
text = "";
textaster = "";
blink=false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[0]=30
if (blink==true) {blink=false exit}
if (blink==false) {blink=true exit}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(selected == true) 
{
if (keyboard_check_pressed(vk_enter) || click=1) {with obj_login {event_perform(ev_left_press,0)} keyboard_lastchar="" global.lchar="" global.lpress=0 click=0 selected=false
if(room==room4) {
obj_email.selected = false;
} exit}
if (global.lpress=1 &amp;&amp; string_length(text)&lt;25) {text+=string(global.lchar) global.lchar="" keyboard_lastchar="" global.lpress=0}
if (keyboard_check_pressed(vk_backspace)) {backtime=32 text=string_delete(text,string_length(text),1)}
if (keyboard_check(vk_backspace) &amp;&amp; backtime&lt;1) {text=string_delete(text,string_length(text),1) backtime=4} 
text=string_lettersdigits(text)
if (keyboard_check_pressed(vk_anykey) &amp;&amp; !keyboard_check_pressed(vk_backspace) &amp;&amp; !keyboard_check_pressed(vk_shift) &amp;&amp; string_length(text)&lt;25) {global.lpress=1 global.lchar=keyboard_lastchar}
backtime-=1
}
if(point_in_rectangle(mouse_x, mouse_y, x,y,x+767, y+96) and mouse_check_button_pressed(mb_left)) {
selected = true;
keyboard_string="";

with(obj_username) {
selected = false;
}
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(point_in_rectangle(mouse_x, mouse_y, x,y,x+767, y+96)) {
selected = true;
keyboard_string="";
with(obj_username) {

selected=false;

}
if(room==room4) {
obj_email.selected = false;
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
if(selected==true) {


if(blink == true) {draw_text(x+40+string_width(textaster), y + 15, "I")}

}
var color = c_black
draw_set_color(color);
draw_set_font(font2);

textaster="";
if (string_length(text)&gt;0)
{
repeat(string_length(text))
{
textaster=textaster+string("*");
}
}
draw_text(x+30, y+20, textaster);
draw_set_halign(fa_left);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
